{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Spool Send mails with YAML. Installation pip install spool See installation for further instructions. Usage spool --help Example configuration file: --- # mails.yml # Optional defaults for keys mails. defaults : sender : foo@example.com recipents : Bar <bar@example.com>, baz@example.com # Optional variables which can be used below. vars : message : | Hello world, Foo bar baz ... Kind regards, Foo # Mails to send. mails : - name : Test Mail description : Hello world test mail headers : X-Mailer : Spool Mailer text_body : '{{ message }}' Generate mail(s): spool --verbose --relay localhost:2525 example/simple.yml Have a look at the reference section or take a peek at the examples .","title":"Spool"},{"location":"#spool","text":"Send mails with YAML.","title":"Spool"},{"location":"#installation","text":"pip install spool See installation for further instructions.","title":"Installation"},{"location":"#usage","text":"spool --help","title":"Usage"},{"location":"#example-configuration-file","text":"--- # mails.yml # Optional defaults for keys mails. defaults : sender : foo@example.com recipents : Bar <bar@example.com>, baz@example.com # Optional variables which can be used below. vars : message : | Hello world, Foo bar baz ... Kind regards, Foo # Mails to send. mails : - name : Test Mail description : Hello world test mail headers : X-Mailer : Spool Mailer text_body : '{{ message }}'","title":"Example configuration file:"},{"location":"#generate-mails","text":"spool --verbose --relay localhost:2525 example/simple.yml Have a look at the reference section or take a peek at the examples .","title":"Generate mail(s):"},{"location":"api/","text":"Developer Interface exceptions SpoolError Base class for exceptions. mailer Mailer Represents an SMTP connection. dump ( msg ) staticmethod Print a message to console. Prints a given message to console in Internet Message Format (IMF). Parameters: Name Type Description Default msg A message. required Source code in spool/mailer.py 185 186 187 188 189 190 191 192 193 194 195 @staticmethod def dump ( msg ): \"\"\"Print a message to console. Prints a given message to console in Internet Message Format (IMF). Args: msg: A message. \"\"\" print ( MAIL_OUT_PREFIX , msg . as_string (), MAIL_OUT_SUFFIX , sep = ' \\n ' ) get_helo_name () staticmethod Retrive the helo/ehlo name based on the hostname. Source code in spool/mailer.py 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 @staticmethod def get_helo_name (): \"\"\"Retrive the helo/ehlo name based on the hostname.\"\"\" fqdn = socket . getfqdn () if '.' in fqdn : return fqdn # Use a domain literal for the EHLO/HELO verb, as specified in RFC 2821 address = '127.0.0.1' try : address = socket . gethostbyname ( socket . gethostname ()) except socket . gaierror : pass return f '[ { address } ]' send ( self , msg , print_only = True ) Send a message. Parameters: Name Type Description Default msg The message to send (or print to console) required print_only obj: bool , optional): Whether to print the message to console instead of sending to remote. True Source code in spool/mailer.py 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 def send ( self , msg , print_only = True ): \"\"\"Send a message. Args: msg: The message to send (or print to console) print_only (:obj: `bool`, optional): Whether to print the message to console instead of sending to remote. \"\"\" if print_only : self . dump ( msg ) sender = formataddr ( msg . sender ) recipients = msg . recipients + msg . cc_addrs + msg . bcc_addrs recipients = [ formataddr ( r ) for r in recipients ] if self . relay : self . _send_message ( self . relay , sender , recipients , msg ) else : def domain ( address ): return address . split ( '@' , 1 )[ - 1 ] if self . reorder_recipients : recipients = sorted ( recipients , key = domain ) for domain , recipients in itertools . groupby ( recipients , domain ): try : host = self . _get_remote ( domain , self . nameservers ) except RemoteNotFoundError as err : LOG . error ( 'Failed to send message: %s [name= %s ]' , err , msg . name ) continue self . _send_message ( host , sender , list ( recipients ), msg ) MailerError Base class for all errors related to the mailer. RemoteNotFoundError Remote server could not be evaluated. main cli () Main cli entry point. Source code in spool/main.py 203 204 205 206 207 208 209 210 211 212 213 214 def cli (): \"\"\"Main cli entry point.\"\"\" try : run () except SpoolError as ex : logging . critical ( ex ) sys . exit ( 1 ) except Exception : logging . critical ( 'Unexpected error occured.' , exc_info = True ) sys . exit ( 1 ) parse_args ( args ) Parse command line arguments. Source code in spool/main.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 def parse_args ( args ): \"\"\"Parse command line arguments.\"\"\" parser = argparse . ArgumentParser ( description = 'Send mails with YAML.' ) parser . add_argument ( '-r' , '--relay' , help = 'smtp relay smtp server' , ) parser . add_argument ( '-p' , '--port' , type = int , default = 25 , help = 'port on remote server, default: 25' , ) parser . add_argument ( '-n' , '--nameservers' , help = 'nameservers for lookup of MX records' ) parser . add_argument ( '-d' , '--delay' , type = float , help = 'delay delivery by a given number of seconds after each mail' ) parser . add_argument ( '-D' , '--debug' , action = 'store_true' , help = 'enable debugging on smtp conversation' , ) parser . add_argument ( '-P' , '--print-only' , action = 'store_true' , help = 'print, but do not send messages' , ) parser . add_argument ( '-H' , '--helo' , help = 'helo name used when connecting to the smtp server' , ) parser . add_argument ( '-c' , '--check' , action = 'store_true' , help = 'check config files and quit' , ) parser . add_argument ( '-t' , '--tags' , help = 'tags to execute' , ) parser . add_argument ( '--starttls' , action = 'store_true' , help = '' ) parser . add_argument ( 'path' , nargs = '+' , metavar = 'config' , type = Path , help = 'path of spool config' , ) output_group = parser . add_mutually_exclusive_group () output_group . add_argument ( '-v' , '--verbose' , action = 'count' , default = 0 , dest = 'verbosity' , help = 'verbose output (repeat for increased verbosity)' , ) output_group . add_argument ( '-s' , '--silent' , action = 'store_const' , const =- 1 , default = 0 , dest = 'verbosity' , help = 'quiet output (show errors only)' , ) return parser . parse_args ( args ) run () Main method. Source code in spool/main.py 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 def run (): \"\"\"Main method.\"\"\" args = parse_args ( sys . argv [ 1 :]) config_logger ( args . verbosity ) first = True for path in args . path : if not path . is_file (): LOG . warning ( 'No such file, skipping. [path= %s ]' , path ) continue try : config = Config . load ( path ) if args . check : continue except ConfigError as ex : LOG . error ( 'Error while parsing config: %s [path= %s ]' , ex , path ) continue with Mailer ( relay = args . relay , port = args . port , helo = args . helo , debug = args . debug , nameservers = args . nameservers , starttls = args . starttls ) as mailer : for mail in config . mails : if not tags_matches_mail ( args . tags , mail . pop ( 'tags' , [])): LOG . debug ( 'Skipping message \" %s \", does not match tags: %s ' , mail [ 'name' ], args . tags ) continue if not first and args . delay : LOG . debug ( 'Delay sending of next message by %.2f seconds.' , args . delay ) time . sleep ( args . delay ) else : first = False mail . pop ( 'description' , None ) mail = parse_files ( path , mail ) attachments = mail . pop ( 'attachments' , []) msg = Message ( ** mail ) if isinstance ( attachments , str ): attachments = [ attachments ] for attachment in attachments : file_path = path . parent / attachment msg . attach ( file_path ) try : mailer . send ( msg , args . print_only ) except MessageError as ex : LOG . error ( 'Failed to create message: %s . [name= %s , path= %s ]' , ex , mail [ 'name' ], path ) tags_matches_mail ( tags , mail ) Returns True if mail has a matching tag. Source code in spool/main.py 100 101 102 103 104 105 106 107 108 def tags_matches_mail ( tags , mail ): \"\"\"Returns True if mail has a matching tag.\"\"\" if not tags : return True tags = [ tag . strip () for tag in tags . split ( ',' )] return any ( tag in mail for tag in tags ) message EmailHeaders Case insensitive dictionary to store email headers. Copied from Requests CaseInsensitiveDict . .. _ Requests : https : // requests . readthedocs . io Message Represents a single email message. headers property readonly Get the message headers. as_string ( self ) Return the entire message flattened as a string. Returns: Type Description str The message as Internet Message Format (IMF) formatted string. Source code in spool/message.py 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 def as_string ( self ): \"\"\"Return the entire message flattened as a string. Returns: str: The message as Internet Message Format (IMF) formatted string. \"\"\" if self . attachments or self . ical : msg = self . _multipart () else : msg = self . _plaintext () if self . smime : if 'from_key' in self . smime and 'from_crt' in self . smime : msg = sign ( msg , self . smime [ 'from_key' ], self . smime [ 'from_crt' ]) if 'to_crts' in self . smime : msg = encrypt ( msg , self . smime [ 'to_crts' ]) for name , value in self . headers . items (): msg [ name ] = value if self . dkim : for key , value in self . dkim . items (): self . dkim [ key ] = value . encode () dkim_header = dkim_sign ( msg . as_bytes (), ** self . dkim ) . decode () name , value = dkim_header . split ( ':' , 1 ) msg [ name ] = value return msg . as_string () attach ( self , file_path ) Add file to message attachments. Adds a given path to the set of files which are appended to the generated message when the method as_string is called. Parameters: Name Type Description Default file_path str relative or absolute path to the file. required Source code in spool/message.py 168 169 170 171 172 173 174 175 176 177 178 def attach ( self , file_path ): \"\"\"Add file to message attachments. Adds a given path to the set of files which are appended to the generated message when the method `as_string` is called. Args: file_path (str): relative or absolute path to the file. \"\"\" self . attachments . append ( file_path ) MessageError Base class for message related errors. parse_addrs ( addrs ) Parses a comma separated string to list of email addresses. Wrapper arround pythons email.utils.parseaddr function to parse a comma separated list of email addresses. Parameters: Name Type Description Default addrs Comma separated string or list of email addresses to parse required Returns: Type Description list A list of tuples consiting of realname and email address parts Examples: 1 2 3 4 >>> parse_addrs ( 'john doe <john@example.com>, jane.doe@example.com' ) [( 'john doe' , 'john@example.com' ), ( '' , 'jane.doe@example.com' )] >>> parse_addrs ( ', john doe <john.doe@example.com>' ) [( 'john doe' , 'john.doe@example.com' )] Source code in spool/message.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 def parse_addrs ( addrs ): \"\"\"Parses a comma separated string to list of email addresses. Wrapper arround pythons `email.utils.parseaddr` function to parse a comma separated list of email addresses. Args: addrs: Comma separated string or list of email addresses to parse Returns: list: A list of tuples consiting of *realname* and *email address* parts Examples: >>> parse_addrs('john doe <john@example.com>, jane.doe@example.com') [('john doe', 'john@example.com'), ('', 'jane.doe@example.com')] >>> parse_addrs(', john doe <john.doe@example.com>') [('john doe', 'john.doe@example.com')] \"\"\" if isinstance ( addrs , str ): addrs = addrs . split ( ',' ) if isinstance ( addrs , list ): return [ parseaddr ( item ) for item in addrs if item ] return [ parseaddr ( addrs )] parser Config Represents a single mail instance config. load ( config ) staticmethod Create a config object from a config file. Source code in spool/parser.py 163 164 165 166 167 168 169 170 171 @staticmethod def load ( config ): \"\"\"Create a config object from a config file.\"\"\" if not isinstance ( config , dict ): LOG . info ( 'Parsing config file. [path= %s ]' , config ) with open ( config , 'r' ) as fh : config = yaml . safe_load ( fh ) return Config ( config ) ConfigError Base class for all parsing errors. ValidationError Validation Error. to_list ( string ) Returns a list of values from a comma separated string Source code in spool/parser.py 12 13 14 15 16 17 18 def to_list ( string ): \"\"\"Returns a list of values from a comma separated string\"\"\" if isinstance ( string , list ): return string return [ item . strip () for item in string . split ( ',' )] smime encode_cms ( mime_part ) Encodes a cms structure Source code in spool/smime.py 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 def encode_cms ( mime_part ): \"\"\"Encodes a cms structure\"\"\" mime_part [ 'Content-Transfer-Encoding' ] = 'base64' if mime_part . get_payload () is None : return mime_part cms = mime_part . get_payload () . pem () match = PEM_RE . search ( cms ) if not match : raise ValueError ( 'Failed to retrive cms' ) mime_part . set_payload ( match . group ( 2 )) return mime_part encrypt ( message , certs , algorithm = 'des3' ) Encrypt a given message. Source code in spool/smime.py 85 86 87 88 89 90 91 92 93 94 95 def encrypt ( message , certs , algorithm = 'des3' ): \"\"\"Encrypt a given message.\"\"\" certs , cipher = parse_pem ( certs ), CipherType ( algorithm ) cms = EnvelopedData . create ( certs , message . as_bytes (), cipher , flags = 0 ) encrypted = MIMEApplication ( cms , 'pkcs7-mime' , encode_cms , smime_type = 'enveloped-data' , name = 'smime.p7m' ) return encrypted parse_pem ( certstack ) Extract PEM strings from certstack . Source code in spool/smime.py 23 24 25 26 27 28 29 30 31 def parse_pem ( certstack ): \"\"\"Extract PEM strings from *certstack*.\"\"\" certs = [ X509 ( match . group ( 0 )) for match in PEM_RE . finditer ( certstack ) ] return certs sign ( message , key , cert , detached = True ) Sign a a given message. Source code in spool/smime.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 def sign ( message , key , cert , detached = True ): \"\"\"Sign a a given message.\"\"\" # FIXME if not detached : raise NotImplementedError () signed = MIMEMultipart ( 'signed' , micalg = 'sha-256' , protocol = 'application/pkcs7-signature' ) signed . preamble = SIGNED_PREAMBLE signed . attach ( message ) cann = message . as_bytes () . replace ( b ' \\n ' , b ' \\r\\n ' ) key , certstack = PKey ( privkey = key . encode ()), parse_pem ( cert ) flags = Flags . DETACHED + Flags . BINARY cms = SignedData . create ( cann , certstack [ - 1 ], key , flags = flags , certs = certstack [ 0 : - 1 ]) signature = MIMEApplication ( cms , 'pkcs7-signature' , encode_cms , name = 'smime.p7s' ) signature . add_header ( 'Content-Disposition' , 'attachment' , filename = 'smime.p7s' ) signed . attach ( signature ) return signed","title":"Developer Interface"},{"location":"api/#developer-interface","text":"","title":"Developer Interface"},{"location":"api/#spool","text":"","title":"spool"},{"location":"api/#spool.exceptions","text":"","title":"exceptions"},{"location":"api/#spool.exceptions.SpoolError","text":"Base class for exceptions.","title":"SpoolError"},{"location":"api/#spool.mailer","text":"","title":"mailer"},{"location":"api/#spool.mailer.Mailer","text":"Represents an SMTP connection.","title":"Mailer"},{"location":"api/#spool.mailer.Mailer.dump","text":"Print a message to console. Prints a given message to console in Internet Message Format (IMF). Parameters: Name Type Description Default msg A message. required Source code in spool/mailer.py 185 186 187 188 189 190 191 192 193 194 195 @staticmethod def dump ( msg ): \"\"\"Print a message to console. Prints a given message to console in Internet Message Format (IMF). Args: msg: A message. \"\"\" print ( MAIL_OUT_PREFIX , msg . as_string (), MAIL_OUT_SUFFIX , sep = ' \\n ' )","title":"dump()"},{"location":"api/#spool.mailer.Mailer.get_helo_name","text":"Retrive the helo/ehlo name based on the hostname. Source code in spool/mailer.py 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 @staticmethod def get_helo_name (): \"\"\"Retrive the helo/ehlo name based on the hostname.\"\"\" fqdn = socket . getfqdn () if '.' in fqdn : return fqdn # Use a domain literal for the EHLO/HELO verb, as specified in RFC 2821 address = '127.0.0.1' try : address = socket . gethostbyname ( socket . gethostname ()) except socket . gaierror : pass return f '[ { address } ]'","title":"get_helo_name()"},{"location":"api/#spool.mailer.Mailer.send","text":"Send a message. Parameters: Name Type Description Default msg The message to send (or print to console) required print_only obj: bool , optional): Whether to print the message to console instead of sending to remote. True Source code in spool/mailer.py 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 def send ( self , msg , print_only = True ): \"\"\"Send a message. Args: msg: The message to send (or print to console) print_only (:obj: `bool`, optional): Whether to print the message to console instead of sending to remote. \"\"\" if print_only : self . dump ( msg ) sender = formataddr ( msg . sender ) recipients = msg . recipients + msg . cc_addrs + msg . bcc_addrs recipients = [ formataddr ( r ) for r in recipients ] if self . relay : self . _send_message ( self . relay , sender , recipients , msg ) else : def domain ( address ): return address . split ( '@' , 1 )[ - 1 ] if self . reorder_recipients : recipients = sorted ( recipients , key = domain ) for domain , recipients in itertools . groupby ( recipients , domain ): try : host = self . _get_remote ( domain , self . nameservers ) except RemoteNotFoundError as err : LOG . error ( 'Failed to send message: %s [name= %s ]' , err , msg . name ) continue self . _send_message ( host , sender , list ( recipients ), msg )","title":"send()"},{"location":"api/#spool.mailer.MailerError","text":"Base class for all errors related to the mailer.","title":"MailerError"},{"location":"api/#spool.mailer.RemoteNotFoundError","text":"Remote server could not be evaluated.","title":"RemoteNotFoundError"},{"location":"api/#spool.main","text":"","title":"main"},{"location":"api/#spool.main.cli","text":"Main cli entry point. Source code in spool/main.py 203 204 205 206 207 208 209 210 211 212 213 214 def cli (): \"\"\"Main cli entry point.\"\"\" try : run () except SpoolError as ex : logging . critical ( ex ) sys . exit ( 1 ) except Exception : logging . critical ( 'Unexpected error occured.' , exc_info = True ) sys . exit ( 1 )","title":"cli()"},{"location":"api/#spool.main.parse_args","text":"Parse command line arguments. Source code in spool/main.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 def parse_args ( args ): \"\"\"Parse command line arguments.\"\"\" parser = argparse . ArgumentParser ( description = 'Send mails with YAML.' ) parser . add_argument ( '-r' , '--relay' , help = 'smtp relay smtp server' , ) parser . add_argument ( '-p' , '--port' , type = int , default = 25 , help = 'port on remote server, default: 25' , ) parser . add_argument ( '-n' , '--nameservers' , help = 'nameservers for lookup of MX records' ) parser . add_argument ( '-d' , '--delay' , type = float , help = 'delay delivery by a given number of seconds after each mail' ) parser . add_argument ( '-D' , '--debug' , action = 'store_true' , help = 'enable debugging on smtp conversation' , ) parser . add_argument ( '-P' , '--print-only' , action = 'store_true' , help = 'print, but do not send messages' , ) parser . add_argument ( '-H' , '--helo' , help = 'helo name used when connecting to the smtp server' , ) parser . add_argument ( '-c' , '--check' , action = 'store_true' , help = 'check config files and quit' , ) parser . add_argument ( '-t' , '--tags' , help = 'tags to execute' , ) parser . add_argument ( '--starttls' , action = 'store_true' , help = '' ) parser . add_argument ( 'path' , nargs = '+' , metavar = 'config' , type = Path , help = 'path of spool config' , ) output_group = parser . add_mutually_exclusive_group () output_group . add_argument ( '-v' , '--verbose' , action = 'count' , default = 0 , dest = 'verbosity' , help = 'verbose output (repeat for increased verbosity)' , ) output_group . add_argument ( '-s' , '--silent' , action = 'store_const' , const =- 1 , default = 0 , dest = 'verbosity' , help = 'quiet output (show errors only)' , ) return parser . parse_args ( args )","title":"parse_args()"},{"location":"api/#spool.main.run","text":"Main method. Source code in spool/main.py 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 def run (): \"\"\"Main method.\"\"\" args = parse_args ( sys . argv [ 1 :]) config_logger ( args . verbosity ) first = True for path in args . path : if not path . is_file (): LOG . warning ( 'No such file, skipping. [path= %s ]' , path ) continue try : config = Config . load ( path ) if args . check : continue except ConfigError as ex : LOG . error ( 'Error while parsing config: %s [path= %s ]' , ex , path ) continue with Mailer ( relay = args . relay , port = args . port , helo = args . helo , debug = args . debug , nameservers = args . nameservers , starttls = args . starttls ) as mailer : for mail in config . mails : if not tags_matches_mail ( args . tags , mail . pop ( 'tags' , [])): LOG . debug ( 'Skipping message \" %s \", does not match tags: %s ' , mail [ 'name' ], args . tags ) continue if not first and args . delay : LOG . debug ( 'Delay sending of next message by %.2f seconds.' , args . delay ) time . sleep ( args . delay ) else : first = False mail . pop ( 'description' , None ) mail = parse_files ( path , mail ) attachments = mail . pop ( 'attachments' , []) msg = Message ( ** mail ) if isinstance ( attachments , str ): attachments = [ attachments ] for attachment in attachments : file_path = path . parent / attachment msg . attach ( file_path ) try : mailer . send ( msg , args . print_only ) except MessageError as ex : LOG . error ( 'Failed to create message: %s . [name= %s , path= %s ]' , ex , mail [ 'name' ], path )","title":"run()"},{"location":"api/#spool.main.tags_matches_mail","text":"Returns True if mail has a matching tag. Source code in spool/main.py 100 101 102 103 104 105 106 107 108 def tags_matches_mail ( tags , mail ): \"\"\"Returns True if mail has a matching tag.\"\"\" if not tags : return True tags = [ tag . strip () for tag in tags . split ( ',' )] return any ( tag in mail for tag in tags )","title":"tags_matches_mail()"},{"location":"api/#spool.message","text":"","title":"message"},{"location":"api/#spool.message.EmailHeaders","text":"Case insensitive dictionary to store email headers. Copied from Requests CaseInsensitiveDict . .. _ Requests : https : // requests . readthedocs . io","title":"EmailHeaders"},{"location":"api/#spool.message.Message","text":"Represents a single email message.","title":"Message"},{"location":"api/#spool.message.Message.headers","text":"Get the message headers.","title":"headers"},{"location":"api/#spool.message.Message.as_string","text":"Return the entire message flattened as a string. Returns: Type Description str The message as Internet Message Format (IMF) formatted string. Source code in spool/message.py 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 def as_string ( self ): \"\"\"Return the entire message flattened as a string. Returns: str: The message as Internet Message Format (IMF) formatted string. \"\"\" if self . attachments or self . ical : msg = self . _multipart () else : msg = self . _plaintext () if self . smime : if 'from_key' in self . smime and 'from_crt' in self . smime : msg = sign ( msg , self . smime [ 'from_key' ], self . smime [ 'from_crt' ]) if 'to_crts' in self . smime : msg = encrypt ( msg , self . smime [ 'to_crts' ]) for name , value in self . headers . items (): msg [ name ] = value if self . dkim : for key , value in self . dkim . items (): self . dkim [ key ] = value . encode () dkim_header = dkim_sign ( msg . as_bytes (), ** self . dkim ) . decode () name , value = dkim_header . split ( ':' , 1 ) msg [ name ] = value return msg . as_string ()","title":"as_string()"},{"location":"api/#spool.message.Message.attach","text":"Add file to message attachments. Adds a given path to the set of files which are appended to the generated message when the method as_string is called. Parameters: Name Type Description Default file_path str relative or absolute path to the file. required Source code in spool/message.py 168 169 170 171 172 173 174 175 176 177 178 def attach ( self , file_path ): \"\"\"Add file to message attachments. Adds a given path to the set of files which are appended to the generated message when the method `as_string` is called. Args: file_path (str): relative or absolute path to the file. \"\"\" self . attachments . append ( file_path )","title":"attach()"},{"location":"api/#spool.message.MessageError","text":"Base class for message related errors.","title":"MessageError"},{"location":"api/#spool.message.parse_addrs","text":"Parses a comma separated string to list of email addresses. Wrapper arround pythons email.utils.parseaddr function to parse a comma separated list of email addresses. Parameters: Name Type Description Default addrs Comma separated string or list of email addresses to parse required Returns: Type Description list A list of tuples consiting of realname and email address parts Examples: 1 2 3 4 >>> parse_addrs ( 'john doe <john@example.com>, jane.doe@example.com' ) [( 'john doe' , 'john@example.com' ), ( '' , 'jane.doe@example.com' )] >>> parse_addrs ( ', john doe <john.doe@example.com>' ) [( 'john doe' , 'john.doe@example.com' )] Source code in spool/message.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 def parse_addrs ( addrs ): \"\"\"Parses a comma separated string to list of email addresses. Wrapper arround pythons `email.utils.parseaddr` function to parse a comma separated list of email addresses. Args: addrs: Comma separated string or list of email addresses to parse Returns: list: A list of tuples consiting of *realname* and *email address* parts Examples: >>> parse_addrs('john doe <john@example.com>, jane.doe@example.com') [('john doe', 'john@example.com'), ('', 'jane.doe@example.com')] >>> parse_addrs(', john doe <john.doe@example.com>') [('john doe', 'john.doe@example.com')] \"\"\" if isinstance ( addrs , str ): addrs = addrs . split ( ',' ) if isinstance ( addrs , list ): return [ parseaddr ( item ) for item in addrs if item ] return [ parseaddr ( addrs )]","title":"parse_addrs()"},{"location":"api/#spool.parser","text":"","title":"parser"},{"location":"api/#spool.parser.Config","text":"Represents a single mail instance config.","title":"Config"},{"location":"api/#spool.parser.Config.load","text":"Create a config object from a config file. Source code in spool/parser.py 163 164 165 166 167 168 169 170 171 @staticmethod def load ( config ): \"\"\"Create a config object from a config file.\"\"\" if not isinstance ( config , dict ): LOG . info ( 'Parsing config file. [path= %s ]' , config ) with open ( config , 'r' ) as fh : config = yaml . safe_load ( fh ) return Config ( config )","title":"load()"},{"location":"api/#spool.parser.ConfigError","text":"Base class for all parsing errors.","title":"ConfigError"},{"location":"api/#spool.parser.ValidationError","text":"Validation Error.","title":"ValidationError"},{"location":"api/#spool.parser.to_list","text":"Returns a list of values from a comma separated string Source code in spool/parser.py 12 13 14 15 16 17 18 def to_list ( string ): \"\"\"Returns a list of values from a comma separated string\"\"\" if isinstance ( string , list ): return string return [ item . strip () for item in string . split ( ',' )]","title":"to_list()"},{"location":"api/#spool.smime","text":"","title":"smime"},{"location":"api/#spool.smime.encode_cms","text":"Encodes a cms structure Source code in spool/smime.py 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 def encode_cms ( mime_part ): \"\"\"Encodes a cms structure\"\"\" mime_part [ 'Content-Transfer-Encoding' ] = 'base64' if mime_part . get_payload () is None : return mime_part cms = mime_part . get_payload () . pem () match = PEM_RE . search ( cms ) if not match : raise ValueError ( 'Failed to retrive cms' ) mime_part . set_payload ( match . group ( 2 )) return mime_part","title":"encode_cms()"},{"location":"api/#spool.smime.encrypt","text":"Encrypt a given message. Source code in spool/smime.py 85 86 87 88 89 90 91 92 93 94 95 def encrypt ( message , certs , algorithm = 'des3' ): \"\"\"Encrypt a given message.\"\"\" certs , cipher = parse_pem ( certs ), CipherType ( algorithm ) cms = EnvelopedData . create ( certs , message . as_bytes (), cipher , flags = 0 ) encrypted = MIMEApplication ( cms , 'pkcs7-mime' , encode_cms , smime_type = 'enveloped-data' , name = 'smime.p7m' ) return encrypted","title":"encrypt()"},{"location":"api/#spool.smime.parse_pem","text":"Extract PEM strings from certstack . Source code in spool/smime.py 23 24 25 26 27 28 29 30 31 def parse_pem ( certstack ): \"\"\"Extract PEM strings from *certstack*.\"\"\" certs = [ X509 ( match . group ( 0 )) for match in PEM_RE . finditer ( certstack ) ] return certs","title":"parse_pem()"},{"location":"api/#spool.smime.sign","text":"Sign a a given message. Source code in spool/smime.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 def sign ( message , key , cert , detached = True ): \"\"\"Sign a a given message.\"\"\" # FIXME if not detached : raise NotImplementedError () signed = MIMEMultipart ( 'signed' , micalg = 'sha-256' , protocol = 'application/pkcs7-signature' ) signed . preamble = SIGNED_PREAMBLE signed . attach ( message ) cann = message . as_bytes () . replace ( b ' \\n ' , b ' \\r\\n ' ) key , certstack = PKey ( privkey = key . encode ()), parse_pem ( cert ) flags = Flags . DETACHED + Flags . BINARY cms = SignedData . create ( cann , certstack [ - 1 ], key , flags = flags , certs = certstack [ 0 : - 1 ]) signature = MIMEApplication ( cms , 'pkcs7-signature' , encode_cms , name = 'smime.p7s' ) signature . add_header ( 'Content-Disposition' , 'attachment' , filename = 'smime.p7s' ) signed . attach ( signature ) return signed","title":"sign()"},{"location":"changelog/","text":"Release History 0.9.0 (2020-06-27) Features Add support for S/MIME encryption Allow to use tags Improvements Drop dependency from m2crypto Bugfixes Fix MIME type if only html_body is set Fix header handling for smime signing","title":"Release History"},{"location":"changelog/#release-history","text":"","title":"Release History"},{"location":"changelog/#090-2020-06-27","text":"","title":"0.9.0 (2020-06-27)"},{"location":"changelog/#features","text":"Add support for S/MIME encryption Allow to use tags","title":"Features"},{"location":"changelog/#improvements","text":"Drop dependency from m2crypto","title":"Improvements"},{"location":"changelog/#bugfixes","text":"Fix MIME type if only html_body is set Fix header handling for smime signing","title":"Bugfixes"},{"location":"examples/","text":"Examples Using Loops Loops allow you to cycle through the same message multiple times with a list of arguments. --- defaults : sender : sender@example.com recipients : recipient@example.com mails : - name : Spoofed SPF-enabled domain description : Mails spoofed from domains with valid SPF configuration sender : 'spf-test@{{ item }}' subject : 'SPF Check - {{ item }}' text_body : This is a SPF verification check. loop : - gmail.com - microsoft.com - facebook.com S/MIME Signing and Encryption Use an existing S/MIME certificate to sign your test mails or generate a self signed one with openssl . Generate a Test Key/Certificate openssl req -newkey rsa:2048 -nodes -x509 -days 365 \\ -subj \"/CN=Sender\\/emailAddress=sender@example.com\" \\ -out sender.crt.pem -keyout sender.key.pem Create a S/MIME Signed Message --- mails : - name : smime-signed description : A S/MIME signed message sender : sender@example.org recipients : recipient@example.org subject : S/MIME Signed Message smime : from_key : | -----BEGIN PRIVATE KEY----- MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDYZtV1JkTgaLNL g6256bR+c4z6lSnVc+HKLxJH8ds9oblYjh751/F0dgzFuwkFuLzTYeM8k/ErIfO0 y48cFz3M2j2xEiEY7CSqSgCeXvF4Ps/fn44bDO5k5mK3j7NWmPXtf42PCC5f+BA0 u49knm3VC2GvbwWJ4Y0e+8aVBOvKpwC+TjCXnWHgenURyZ3/CiKsK69cmZ6OE8E1 eFjS7LG938ql+ixyFFxwsWgTwUEVN3fSzTzKcnBtUAi6GbKvw5hkIXAVOr6zu0dw exMiFZ5LKn1ZPjEyKyXj9t3EhQndn/AUO1xOpriJRO1XSTFa7mqXkNpQrLYXe77V gaQAawhHAgMBAAECggEAYwhsl3gz/R7tLpnMX1B8sYHf+q1Yv76Qjh6MlzAvzTy9 vbEMq/oPHeUIY1T9BAlPIM2jWI27yKl5BjxB+fEI7z7RDL/nNaib/vJu5gs9JnJY X1Z9ihOY5cQpWSgCQpcttMqy1cpArtqvT/Kl5L48NUtIISkFt9vo4U0HzBq8bbi4 Lup4FNN0oAnOsY6xJ6ObmPQb8Tzcdcix1WYYWoye1X6WQnwfW1C/nm/OmZpNWwux Z67j2MSZqbv9PDLYF1Oi1fsiQWPL1EpaUHSFv3m5x8OF1iXLI6SLTDiXXIsDKpVs IxoK2XM8g0GFE4DvcV6CpIPz2RRe5SDmMmDXrFX4gQKBgQDyoDNHzO2aJ2cO2Xfv PEfJv05zYNYUsI75oAw09AVqMKG1mpAlzq8d8knBumYReglGi7K8GA3A3vX5CuVL Yjkod6gGp05HVHS9BDwGWYNtqNtRvFbNTkxGc3yH7cLt3UbAngwHM9KnF0u6m3UQ abyCVkomAHdaEtB8o8HjtpSnmQKBgQDkVJLk+UuGjKK9dZfJv19f/OnkvO9UK7qo 3yuyyRP+iYJESd/eskfbSGV9bzMck8v1+kfQUecoTEWnI35ASy/w9+Up0Ut5a4OZ a+ov6oNch0qdomdp0ZKtCeF7sXRV2/KQa/Ur1LdWbQFjuCiA7lguShjQVd/MeHtc zCY6rdOa3wKBgCA3QVfhUBNN9BM2sQQlHusc6c/MJeDtaK6gn75QQH/PIUm50jYS 8ZGqYDzHAVKEv8KMPhlXoEvhzwtYdQXDbw9+g+MOSAiUoEOQ0l+NdzQSXbzGo0fz g5E/OGPcICvxW7mrwrEaInhpUXbfuXWKdKthxcqx+ScOpHxISjBwR+DRAoGAIRn1 tcZCYb4vtaG/oJri28qRqfyOAbjZNbQs5J1sDaGnxfijwOg9rJehRv8A/OqcTgu7 r4LALUJpcqKdofqEd72odliGRZMFoA9aAxpPcvGWKqYpsdiVGArvqnv+bpgVYUSV ZYZQEfJ5mhhPnulu1T8eu81HRaBN2hUqkaUzoScCgYEAgy2R7yT8oRFi8use52K9 qZZym+XVVp3cRjy+4m3b6NrmOS3VHkx+KFWCEjvdluLMZMBXiu2ejpUzBW9OX0mI UdQSJ2MMux1zEILLClaRux6USuJmK7v7qccSWlnzLaI2KAuHAK72rI1SmSQSBCyg fxn9Sa5UDZ9PL2IcwWJ1I60= -----END PRIVATE KEY----- from_crt : | -----BEGIN CERTIFICATE----- MIIDQzCCAiugAwIBAgIUCdN5Mv7hWC06H3M2qdF9D/o4R7MwDQYJKoZIhvcNAQEL BQAwMTEvMC0GA1UEAwwmU2VuZGVyL2VtYWlsQWRkcmVzcz1zZW5kZXJAZXhhbXBs ZS5vcmcwHhcNMjAwNjIwMjEwMDU2WhcNMjEwNjIwMjEwMDU2WjAxMS8wLQYDVQQD DCZTZW5kZXIvZW1haWxBZGRyZXNzPXNlbmRlckBleGFtcGxlLm9yZzCCASIwDQYJ KoZIhvcNAQEBBQADggEPADCCAQoCggEBANhm1XUmROBos0uDrbnptH5zjPqVKdVz 4covEkfx2z2huViOHvnX8XR2DMW7CQW4vNNh4zyT8Ssh87TLjxwXPczaPbESIRjs JKpKAJ5e8Xg+z9+fjhsM7mTmYrePs1aY9e1/jY8ILl/4EDS7j2SebdULYa9vBYnh jR77xpUE68qnAL5OMJedYeB6dRHJnf8KIqwrr1yZno4TwTV4WNLssb3fyqX6LHIU XHCxaBPBQRU3d9LNPMpycG1QCLoZsq/DmGQhcBU6vrO7R3B7EyIVnksqfVk+MTIr JeP23cSFCd2f8BQ7XE6muIlE7VdJMVruapeQ2lCsthd7vtWBpABrCEcCAwEAAaNT MFEwHQYDVR0OBBYEFAE4N6hUuN4S1Hb6AvzNXop1f/IwMB8GA1UdIwQYMBaAFAE4 N6hUuN4S1Hb6AvzNXop1f/IwMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEL BQADggEBADmGLnqLP9leIXn19CAINTg5+np/roa1UWCD5T/5ldTH9GRBEsarunLk 3way8ph8LveEVT2MaTQsWLXNeb/WYgFvxgi/SfnpxtBf4+8NcxuggUPZ/GzGSM8N Re2MnrDJhE4slhll+dp9ERO2Ur9TwP+VghwPKMMQZgTOPSrgfvo+iJrByFZ5cXJ/ I45LGO+aEqbypwqT98Y00kuUlm0JZo2OVvFazAVDlfBnDSTJtFoy6wOSZG92FWiL EGjnEl57ENN/7AB5RsFV6wlRGIw+ozrZCGNMhsh+KCFJkGkKkVv5ci4JZCofLYZr sM8ensrJ6/h0cL56uMbXWTsm/EeuqX0= -----END CERTIFICATE----- text_body : | A sign of our times. Create a S/MIME Encrypted Message --- mails : - name : smime-encrypted description : A S/MIME encrypted message sender : sender@example.com recipients : recipient@example.com subject : S/MIME Encrypted Message smime : to_crts : | -----BEGIN CERTIFICATE----- MIIDSTCCAjGgAwIBAgIUUKvn0vesiWozUxzGfQswUBa3ylUwDQYJKoZIhvcNAQEL BQAwNDEyMDAGA1UEAwwpU2VuZGVyL2VtYWlsQWRkcmVzcz1yZWNpcGllbnRAZXhh bXBsZS5vcmcwHhcNMjAwNjIwMjEwMTE2WhcNMjEwNjIwMjEwMTE2WjA0MTIwMAYD VQQDDClTZW5kZXIvZW1haWxBZGRyZXNzPXJlY2lwaWVudEBleGFtcGxlLm9yZzCC ASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMk8szhuzcT+3qSi5ubh9CF9 ZlMV2a7vgRN2Z+rEtH91SpYM4dyjtgFpz7pvnt+HyNiNngpZYBMURDYKuwoG5KHJ IAi7CeFQKxduYU/mok+/arCQAtcCppIVL+UQp+ITGCIHggHDBpgXBWrK2lB5KF51 MkWfzO23bv3xMfe9/MKVVvWLUR4UWev3HghhoDluMkUHMaSM8Xc/Y8zbnWjQ2SRG ogdmJytfXBS3nxhVHELqdKi8kJ4L8K+Gn/KoDqN34iNcOnFywFby4uLRsKPyYw3W y8QbNLbmY4yMpwIIlE9rVkL1PbEpzUCwBNoWAlUFl6pskqLWu4H5fnY7akWUE/MC AwEAAaNTMFEwHQYDVR0OBBYEFP0D1Z9SJXn7yIntZyYCnJmeThl8MB8GA1UdIwQY MBaAFP0D1Z9SJXn7yIntZyYCnJmeThl8MA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZI hvcNAQELBQADggEBAKidIUibUKaaV76C+dLMAzoUBhbE3CYjNLy0OLylFBCIaF45 MXnk+mLxTEdgTvbK5VJ0XKG2ERMUTOLM6EfF7ck5S5xd95Z7v5JIs/+/N0gWAeB9 bUHXeKafOpjXLlN1njEb3IwtatQuRbKf4xuto5fBA6hAUZmuo8CuxOddCaEmy87I A9Rs9Pb+S+VhMvfqBVmat0o5lqMO3LNfsJOrWgv4PkETA662dsxdj4fv/KvwGd9b eeyUHAriWakZNlCZ4+MEwy3uJd1Sc+96FIU4XuhXcQaJqvcjUwsDquyIEum0rznn OmJkSdlGc0fr9iNNvDiVMHH/sz4WfidJTLxHmoI= -----END CERTIFICATE----- text_body : | A sign of our times. iCalendar Send a calendar invitation. --- mails : - name : iCalendar sender : sender@example.com recipients : recipient@example.com subject : Abraham Lincoln ical : | BEGIN:VCALENDAR VERSION:2.0 PRODID:-//ZContent.net//Zap Calendar 1.0//EN CALSCALE:GREGORIAN METHOD:PUBLISH BEGIN:VEVENT SUMMARY:Abraham Lincoln UID:c7614cff-3549-4a00-9152-d25cc1fe077d SEQUENCE:0 STATUS:CONFIRMED TRANSP:TRANSPARENT RRULE:FREQ=YEARLY;INTERVAL=1;BYMONTH=2;BYMONTHDAY=12 DTSTART:20080212 DTEND:20080213 DTSTAMP:20150421T141403 CATEGORIES:U.S. Presidents,Civil War People LOCATION:Hodgenville\\, Kentucky GEO:37.5739497;-85.7399606 DESCRIPTION:Born February 12\\, 1809\\nSixteenth President (1861-1865)\\n\\n\\n \\nhttp://AmericanHistoryCalendar.com URL:http://americanhistorycalendar.com/peoplecalendar/1,328-abraham-lincoln END:VEVENT END:VCALENDAR","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#using-loops","text":"Loops allow you to cycle through the same message multiple times with a list of arguments. --- defaults : sender : sender@example.com recipients : recipient@example.com mails : - name : Spoofed SPF-enabled domain description : Mails spoofed from domains with valid SPF configuration sender : 'spf-test@{{ item }}' subject : 'SPF Check - {{ item }}' text_body : This is a SPF verification check. loop : - gmail.com - microsoft.com - facebook.com","title":"Using Loops"},{"location":"examples/#smime-signing-and-encryption","text":"Use an existing S/MIME certificate to sign your test mails or generate a self signed one with openssl .","title":"S/MIME Signing and Encryption"},{"location":"examples/#generate-a-test-keycertificate","text":"openssl req -newkey rsa:2048 -nodes -x509 -days 365 \\ -subj \"/CN=Sender\\/emailAddress=sender@example.com\" \\ -out sender.crt.pem -keyout sender.key.pem","title":"Generate a Test Key/Certificate"},{"location":"examples/#create-a-smime-signed-message","text":"--- mails : - name : smime-signed description : A S/MIME signed message sender : sender@example.org recipients : recipient@example.org subject : S/MIME Signed Message smime : from_key : | -----BEGIN PRIVATE KEY----- MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDYZtV1JkTgaLNL g6256bR+c4z6lSnVc+HKLxJH8ds9oblYjh751/F0dgzFuwkFuLzTYeM8k/ErIfO0 y48cFz3M2j2xEiEY7CSqSgCeXvF4Ps/fn44bDO5k5mK3j7NWmPXtf42PCC5f+BA0 u49knm3VC2GvbwWJ4Y0e+8aVBOvKpwC+TjCXnWHgenURyZ3/CiKsK69cmZ6OE8E1 eFjS7LG938ql+ixyFFxwsWgTwUEVN3fSzTzKcnBtUAi6GbKvw5hkIXAVOr6zu0dw exMiFZ5LKn1ZPjEyKyXj9t3EhQndn/AUO1xOpriJRO1XSTFa7mqXkNpQrLYXe77V gaQAawhHAgMBAAECggEAYwhsl3gz/R7tLpnMX1B8sYHf+q1Yv76Qjh6MlzAvzTy9 vbEMq/oPHeUIY1T9BAlPIM2jWI27yKl5BjxB+fEI7z7RDL/nNaib/vJu5gs9JnJY X1Z9ihOY5cQpWSgCQpcttMqy1cpArtqvT/Kl5L48NUtIISkFt9vo4U0HzBq8bbi4 Lup4FNN0oAnOsY6xJ6ObmPQb8Tzcdcix1WYYWoye1X6WQnwfW1C/nm/OmZpNWwux Z67j2MSZqbv9PDLYF1Oi1fsiQWPL1EpaUHSFv3m5x8OF1iXLI6SLTDiXXIsDKpVs IxoK2XM8g0GFE4DvcV6CpIPz2RRe5SDmMmDXrFX4gQKBgQDyoDNHzO2aJ2cO2Xfv PEfJv05zYNYUsI75oAw09AVqMKG1mpAlzq8d8knBumYReglGi7K8GA3A3vX5CuVL Yjkod6gGp05HVHS9BDwGWYNtqNtRvFbNTkxGc3yH7cLt3UbAngwHM9KnF0u6m3UQ abyCVkomAHdaEtB8o8HjtpSnmQKBgQDkVJLk+UuGjKK9dZfJv19f/OnkvO9UK7qo 3yuyyRP+iYJESd/eskfbSGV9bzMck8v1+kfQUecoTEWnI35ASy/w9+Up0Ut5a4OZ a+ov6oNch0qdomdp0ZKtCeF7sXRV2/KQa/Ur1LdWbQFjuCiA7lguShjQVd/MeHtc zCY6rdOa3wKBgCA3QVfhUBNN9BM2sQQlHusc6c/MJeDtaK6gn75QQH/PIUm50jYS 8ZGqYDzHAVKEv8KMPhlXoEvhzwtYdQXDbw9+g+MOSAiUoEOQ0l+NdzQSXbzGo0fz g5E/OGPcICvxW7mrwrEaInhpUXbfuXWKdKthxcqx+ScOpHxISjBwR+DRAoGAIRn1 tcZCYb4vtaG/oJri28qRqfyOAbjZNbQs5J1sDaGnxfijwOg9rJehRv8A/OqcTgu7 r4LALUJpcqKdofqEd72odliGRZMFoA9aAxpPcvGWKqYpsdiVGArvqnv+bpgVYUSV ZYZQEfJ5mhhPnulu1T8eu81HRaBN2hUqkaUzoScCgYEAgy2R7yT8oRFi8use52K9 qZZym+XVVp3cRjy+4m3b6NrmOS3VHkx+KFWCEjvdluLMZMBXiu2ejpUzBW9OX0mI UdQSJ2MMux1zEILLClaRux6USuJmK7v7qccSWlnzLaI2KAuHAK72rI1SmSQSBCyg fxn9Sa5UDZ9PL2IcwWJ1I60= -----END PRIVATE KEY----- from_crt : | -----BEGIN CERTIFICATE----- MIIDQzCCAiugAwIBAgIUCdN5Mv7hWC06H3M2qdF9D/o4R7MwDQYJKoZIhvcNAQEL BQAwMTEvMC0GA1UEAwwmU2VuZGVyL2VtYWlsQWRkcmVzcz1zZW5kZXJAZXhhbXBs ZS5vcmcwHhcNMjAwNjIwMjEwMDU2WhcNMjEwNjIwMjEwMDU2WjAxMS8wLQYDVQQD DCZTZW5kZXIvZW1haWxBZGRyZXNzPXNlbmRlckBleGFtcGxlLm9yZzCCASIwDQYJ KoZIhvcNAQEBBQADggEPADCCAQoCggEBANhm1XUmROBos0uDrbnptH5zjPqVKdVz 4covEkfx2z2huViOHvnX8XR2DMW7CQW4vNNh4zyT8Ssh87TLjxwXPczaPbESIRjs JKpKAJ5e8Xg+z9+fjhsM7mTmYrePs1aY9e1/jY8ILl/4EDS7j2SebdULYa9vBYnh jR77xpUE68qnAL5OMJedYeB6dRHJnf8KIqwrr1yZno4TwTV4WNLssb3fyqX6LHIU XHCxaBPBQRU3d9LNPMpycG1QCLoZsq/DmGQhcBU6vrO7R3B7EyIVnksqfVk+MTIr JeP23cSFCd2f8BQ7XE6muIlE7VdJMVruapeQ2lCsthd7vtWBpABrCEcCAwEAAaNT MFEwHQYDVR0OBBYEFAE4N6hUuN4S1Hb6AvzNXop1f/IwMB8GA1UdIwQYMBaAFAE4 N6hUuN4S1Hb6AvzNXop1f/IwMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEL BQADggEBADmGLnqLP9leIXn19CAINTg5+np/roa1UWCD5T/5ldTH9GRBEsarunLk 3way8ph8LveEVT2MaTQsWLXNeb/WYgFvxgi/SfnpxtBf4+8NcxuggUPZ/GzGSM8N Re2MnrDJhE4slhll+dp9ERO2Ur9TwP+VghwPKMMQZgTOPSrgfvo+iJrByFZ5cXJ/ I45LGO+aEqbypwqT98Y00kuUlm0JZo2OVvFazAVDlfBnDSTJtFoy6wOSZG92FWiL EGjnEl57ENN/7AB5RsFV6wlRGIw+ozrZCGNMhsh+KCFJkGkKkVv5ci4JZCofLYZr sM8ensrJ6/h0cL56uMbXWTsm/EeuqX0= -----END CERTIFICATE----- text_body : | A sign of our times.","title":"Create a S/MIME Signed Message"},{"location":"examples/#create-a-smime-encrypted-message","text":"--- mails : - name : smime-encrypted description : A S/MIME encrypted message sender : sender@example.com recipients : recipient@example.com subject : S/MIME Encrypted Message smime : to_crts : | -----BEGIN CERTIFICATE----- MIIDSTCCAjGgAwIBAgIUUKvn0vesiWozUxzGfQswUBa3ylUwDQYJKoZIhvcNAQEL BQAwNDEyMDAGA1UEAwwpU2VuZGVyL2VtYWlsQWRkcmVzcz1yZWNpcGllbnRAZXhh bXBsZS5vcmcwHhcNMjAwNjIwMjEwMTE2WhcNMjEwNjIwMjEwMTE2WjA0MTIwMAYD VQQDDClTZW5kZXIvZW1haWxBZGRyZXNzPXJlY2lwaWVudEBleGFtcGxlLm9yZzCC ASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMk8szhuzcT+3qSi5ubh9CF9 ZlMV2a7vgRN2Z+rEtH91SpYM4dyjtgFpz7pvnt+HyNiNngpZYBMURDYKuwoG5KHJ IAi7CeFQKxduYU/mok+/arCQAtcCppIVL+UQp+ITGCIHggHDBpgXBWrK2lB5KF51 MkWfzO23bv3xMfe9/MKVVvWLUR4UWev3HghhoDluMkUHMaSM8Xc/Y8zbnWjQ2SRG ogdmJytfXBS3nxhVHELqdKi8kJ4L8K+Gn/KoDqN34iNcOnFywFby4uLRsKPyYw3W y8QbNLbmY4yMpwIIlE9rVkL1PbEpzUCwBNoWAlUFl6pskqLWu4H5fnY7akWUE/MC AwEAAaNTMFEwHQYDVR0OBBYEFP0D1Z9SJXn7yIntZyYCnJmeThl8MB8GA1UdIwQY MBaAFP0D1Z9SJXn7yIntZyYCnJmeThl8MA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZI hvcNAQELBQADggEBAKidIUibUKaaV76C+dLMAzoUBhbE3CYjNLy0OLylFBCIaF45 MXnk+mLxTEdgTvbK5VJ0XKG2ERMUTOLM6EfF7ck5S5xd95Z7v5JIs/+/N0gWAeB9 bUHXeKafOpjXLlN1njEb3IwtatQuRbKf4xuto5fBA6hAUZmuo8CuxOddCaEmy87I A9Rs9Pb+S+VhMvfqBVmat0o5lqMO3LNfsJOrWgv4PkETA662dsxdj4fv/KvwGd9b eeyUHAriWakZNlCZ4+MEwy3uJd1Sc+96FIU4XuhXcQaJqvcjUwsDquyIEum0rznn OmJkSdlGc0fr9iNNvDiVMHH/sz4WfidJTLxHmoI= -----END CERTIFICATE----- text_body : | A sign of our times.","title":"Create a S/MIME Encrypted Message"},{"location":"examples/#icalendar","text":"Send a calendar invitation. --- mails : - name : iCalendar sender : sender@example.com recipients : recipient@example.com subject : Abraham Lincoln ical : | BEGIN:VCALENDAR VERSION:2.0 PRODID:-//ZContent.net//Zap Calendar 1.0//EN CALSCALE:GREGORIAN METHOD:PUBLISH BEGIN:VEVENT SUMMARY:Abraham Lincoln UID:c7614cff-3549-4a00-9152-d25cc1fe077d SEQUENCE:0 STATUS:CONFIRMED TRANSP:TRANSPARENT RRULE:FREQ=YEARLY;INTERVAL=1;BYMONTH=2;BYMONTHDAY=12 DTSTART:20080212 DTEND:20080213 DTSTAMP:20150421T141403 CATEGORIES:U.S. Presidents,Civil War People LOCATION:Hodgenville\\, Kentucky GEO:37.5739497;-85.7399606 DESCRIPTION:Born February 12\\, 1809\\nSixteenth President (1861-1865)\\n\\n\\n \\nhttp://AmericanHistoryCalendar.com URL:http://americanhistorycalendar.com/peoplecalendar/1,328-abraham-lincoln END:VEVENT END:VCALENDAR","title":"iCalendar"},{"location":"installation/","text":"Installation Python Version We recommend using the latest version of Python 3. Note Spool needs Python 3.6 or above to be installed. Install Spool To install spool simply run: pip install spool","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#python-version","text":"We recommend using the latest version of Python 3. Note Spool needs Python 3.6 or above to be installed.","title":"Python Version"},{"location":"installation/#install-spool","text":"To install spool simply run: pip install spool","title":"Install Spool"},{"location":"reference/","text":"Reference Defaults The defaults section can be used for properties that should apply for all messages in a given configuration file. Properties defined in the mails section have a higher precedence and therefore overwrite the default values. The following configuration would result in a message from sender@example.com to recipient@example.net --- defaults : sender : sender@example.com recipients : recipient@example.com mails : - subject : Hello World text_body : This is a simple hello. - sender : other@example.com subject : Hello World text_body : This is a simple hello. Vars The vars section holds variables which can be used in other sections like mails or defaults . --- vars : names : - Alice - Bob - Rachel mails : - sender : sender@example.com recipients : recipient@example.com subject : 'Hello {{ item }}' text_body : This is a simple hello. loop : '{{ names }}' Mails The mails section defines the messages which should be generated. The following configuration would create a message from 'sender@example.com' to 'recipient@example.com' --- mails : - name : hello-world sender : sender@example.com recipients : recipient@example.com subject : Hello World text_body : This is a simple hello. name An reference name for the message description An optional description for the message sender Defines the envelope sender recipients Defines a single or a list of recipients subject Subject of the message from Corresponds to the from header in IMF , defaults to sender to Corresponds to the to header in IMF , defaults to recipients cc Corresponds to the cc header in IMF bcc Corresponds to the bcc header in IMF text_body A MIME part of type text/plain text_html A MIME part of type text/html attachments List of files which are attached to the message dkim Specifies the settings for dkim signing smime Specifies the parameters for smime singing/encryption loop List of parameters to loop over.","title":"Reference"},{"location":"reference/#reference","text":"","title":"Reference"},{"location":"reference/#defaults","text":"The defaults section can be used for properties that should apply for all messages in a given configuration file. Properties defined in the mails section have a higher precedence and therefore overwrite the default values. The following configuration would result in a message from sender@example.com to recipient@example.net --- defaults : sender : sender@example.com recipients : recipient@example.com mails : - subject : Hello World text_body : This is a simple hello. - sender : other@example.com subject : Hello World text_body : This is a simple hello.","title":"Defaults"},{"location":"reference/#vars","text":"The vars section holds variables which can be used in other sections like mails or defaults . --- vars : names : - Alice - Bob - Rachel mails : - sender : sender@example.com recipients : recipient@example.com subject : 'Hello {{ item }}' text_body : This is a simple hello. loop : '{{ names }}'","title":"Vars"},{"location":"reference/#mails","text":"The mails section defines the messages which should be generated. The following configuration would create a message from 'sender@example.com' to 'recipient@example.com' --- mails : - name : hello-world sender : sender@example.com recipients : recipient@example.com subject : Hello World text_body : This is a simple hello. name An reference name for the message description An optional description for the message sender Defines the envelope sender recipients Defines a single or a list of recipients subject Subject of the message from Corresponds to the from header in IMF , defaults to sender to Corresponds to the to header in IMF , defaults to recipients cc Corresponds to the cc header in IMF bcc Corresponds to the bcc header in IMF text_body A MIME part of type text/plain text_html A MIME part of type text/html attachments List of files which are attached to the message dkim Specifies the settings for dkim signing smime Specifies the parameters for smime singing/encryption loop List of parameters to loop over.","title":"Mails"}]}